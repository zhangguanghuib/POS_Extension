using Microsoft.Dynamics.ApplicationPlatform.Services.Instrumentation;
using Microsoft.DynamicsOnline.Infrastructure.Components.SharedServiceUnitStorage;
using Microsoft.Dynamics.AX.Framework.FileManagement;

internal final class ProductTemplateDecompress
{

    public static void main(Args _args)
    {
        ProductTemplateDecompress productTemplateDecompress = new ProductTemplateDecompress();
        productTemplateDecompress.run();
    }

    public void run()
    {
        TextBuffer textBuffer;
        TableName tableName = tableId2Name(8649);
        SysRecordTemplateTable sysRecordTemplateTable = SysRecordTemplateTable::find(8649);
        
        if(sysRecordTemplateTable.RecId)
        {
            container data = sysRecordTemplateTable.Data;

            if(conlen(data) > 0)
            {
                textBuffer = new TextBuffer();
                // Add column header
                textBuffer.appendText(strFmt("%1,", "Product Template"));
                textBuffer.appendText(strFmt("%1,", "ItemId"));
                textBuffer.appendText(strFmt("%1,", "Has ProductMaster"));
                textBuffer.appendText(strFmt("%1,", "ProductId"));
                textBuffer.appendText(strFmt("%1,", "ProductDimensionGroupRecId"));
                textBuffer.appendText(strFmt("%1,", "EcoResProductDimensionGroupProduct"));
                textBuffer.appendText(strFmt("%1,", "ProductMasterName"));
                textBuffer.appendText(strFmt("%1",  "ProductDimensionGroupName"));
                textBuffer.appendText(strFmt("%1",  "Is Product Dimension Group Missing"));
                textBuffer.appendText("\n");
            }

            for (int i = conlen(data); i > 1; i--)
            {
                SysRecordTmpTemplate         tmp;
                [tmp.Description, tmp.DefaultRecord, tmp.Data, tmp.Details] = conpeek(data, i);

                // Product Template Name
                textBuffer.appendText(strFmt("%1,", tmp.Description));

                container inventTableContainer = conPeek(tmp.data, 1);

                ItemIdBase itemId = conPeek(conPeek(conPeek(inventTableContainer, 2), 1), 2);
                //Item Id:
                textBuffer.appendText(strFmt("%1,", '_'+itemId));

                //Product Master YES:NO
                RecId productRecId = conPeek(conPeek(conPeek(inventTableContainer, 2), 89), 2);
                EcoResProductMaster productMaster =  EcoResProductMaster::find(productRecId);
                textBuffer.appendText(strFmt("%1,", EcoResProductMaster::exist(productRecId) ? "YES": "NO"));

                int j = conLen(tmp.Data);
                container productDimensionCon = conPeek(tmp.Data, j);

                str dataSourceName = conPeek(productDimensionCon, 1);
                str product     = conPeek(conPeek(conPeek(productDimensionCon, 2),1), 1);
                RecId productId = conPeek(conPeek(conPeek(productDimensionCon, 2),1), 2);

                // Product Id
                textBuffer.appendText(strFmt("%1,", productId));

                str productDimensionGroup     = conPeek(conPeek(conPeek(productDimensionCon, 2),2), 1);
                RecId productDimensionGroupId = conPeek(conPeek(conPeek(productDimensionCon, 2),2), 2);
                // Product Dimension Group RecId
                textBuffer.appendText(strFmt("%1,", productDimensionGroupId));

                EcoResProductDimensionGroupProduct  ecoResProductDimensionGroupProduct;
                EcoResProductMaster                 ecoResProductMaster;
                EcoResProductDimensionGroup         ecoResProductDimensionGroup;

                if (productId && productDimensionGroupId)
                {
                    select firstonly ecoResProductDimensionGroupProduct
                    where  ecoResProductDimensionGroupProduct.Product == productId
                        && ecoResProductDimensionGroupProduct.ProductDimensionGroup == productDimensionGroupId;

                    //EcoResProductDimensionGroupProduct RecId
                    textBuffer.appendText(strFmt("%1,", ecoResProductDimensionGroupProduct.RecId));

                    select ecoResProductMaster where ecoResProductMaster.RecId == productId;

                    //Product Master Search Name
                    textBuffer.appendText(strFmt("%1,", ecoResProductMaster.SearchName));

                    select ecoResProductDimensionGroup where ecoResProductDimensionGroup.RecId == productDimensionGroupId;

                    // Product Dimension Group Name
                    textBuffer.appendText(strFmt("%1,", ecoResProductDimensionGroup.Name));
                }
                else
                {
                    textBuffer.appendText(strFmt("%1,", ""));
                    textBuffer.appendText(strFmt("%1,", ""));
                    textBuffer.appendText(strFmt("%1,", ""));
                }

                textBuffer.appendText(strFmt("%1", EcoResProductMaster::exist(productRecId) && !productDimensionGroupId ? "YES" :""));

                textBuffer.appendText("\n");
            }
        }

        if(textBuffer.getText())
        {
            str fileName = this.writeContentToCSV(textBuffer);
            str blobLink = this.uploadCSVToAzureBlob(fileName);

            if (blobLink)
            {
                System.IO.Stream stream = File::UseFileFromURL(blobLink);
                //File::SendFileToUser(stream, guid2StrWithoutBraces(newGuid())+".csv");
                File::SendFileToUser(stream, fileName);
            }
        }
    }

    private str generateUniqueFileName()
    {
        System.DateTimeOffset timeNow = System.DateTimeOffset::Now;
        str fileName  = strFmt("%1%2%3.csv", timeNow.Year, timeNow.Month, timeNow.Day);
        fileName = guid2StrWithoutBraces(newGuid()) + "_" + fileName;
        return fileName;
    }

    public str writeContentToCSV(TextBuffer fileContent)
    {
        str filePath = System.IO.Path::GetTempPath();
        str _fileName = this.generateUniqueFileName();
        str filePathAndName = System.IO.Path::Combine(System.IO.Path::GetTempPath(), _fileName);
       
        try
        {
            if (fileContent.toFile(filePathAndName))
            {
                return _fileName;
            }
        }
        catch(Exception::Error)
        {
            retry;
        }
        return "";
    }

    public str uploadCSVToAzureBlob(str _fileName)
    {
        str _filePathAndName = System.IO.Path::Combine(System.IO.Path::GetTempPath(), _fileName);
        System.IO.Stream  _stream = File::UseFileFromURL(_filePathAndName);
        var blobInfo = new SharedServiceUnitStorageData();
        blobInfo.Id = guid2StrWithoutBraces(newGuid())+".csv";
        blobInfo.Category = "AzureStorage";//Folder name
        blobInfo.Name = _fileName;
        blobInfo.Accessibility = Accessibility::Private;
        blobInfo.Retention = Retention::Permanent;
       
        if (_stream.CanSeek)
        {
            _stream.Seek(0, System.IO.SeekOrigin::Begin);
        }
        var blobStorageService = new SharedServiceUnitStorage(SharedServiceUnitStorage::GetDefaultStorageContext());
        blobStorageService.UploadData(blobInfo, _stream);
        var uploadedBlobInfo = blobStorageService.GetData(blobInfo.Id, "AzureStorage", BlobUrlPermission::Read, System.TimeSpan::FromDays(30));
        //Time span To keep the file Azure.
        str downloadUrl = uploadedBlobInfo.BlobLink;
        return downloadUrl;
    }

}